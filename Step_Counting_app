
//include accelerometer class
#include "ADXL345.h"

//include custom timer object
#include "PeriodicTimer.h"

//include vectors, math, string
#include <vector>
#include <cmath>
#include <string>

//define appropriate namespace
using namespace std;

//ADXL object
ADXL345 accel;

//Timer object
PeriodicTimer timer;


/**
 * Define all global variables and data arrays
 */
const int ARRAY_LENGTH = 16;
float magnitude[ARRAY_LENGTH];
float diffs[ARRAY_LENGTH];
float squares[ARRAY_LENGTH];
float averages[ARRAY_LENGTH];

/**
 * Enumerate some basic states the machine may wish to follow
 */
enum STATE {IDLE, DETECT, TIMEOUT};
STATE currentState;
STATE nextState;

int counter = 0;
int stepcounter = 0;
int timeoutCounter = 0;
const int TIMEOUT_PERIOD = 5;
/**
 * Place all operations here that will be run "once". These include initializing the
 * SPI, UART, and TIMER Interfaces
 */
void app_init(void)
{

  //enable the clock for the High-Frequency Peripherals
  CMU_ClockEnable(cmuClock_HFPER, true);

  //enable the specific clock for the TIMER0
  CMU_ClockEnable(cmuClock_TIMER0, true);

  /**
   * Initial all arrays defined above to known values. Really should be 0.
   * Will use FOR LOOP that is very inefficient but is guaranteed to work on all systems
   */

  for(int i=0;i<ARRAY_LENGTH;i++)
    {
      magnitude[i]=0;
      diffs[i]=0;
      squares[i]=0;
      averages[i]=0;
    }

  // Initialize the states of the machine to the initial one
  currentState = IDLE;
  nextState = IDLE;

  //initialize accelerometer
  accel.initialize();

  bool success = accel.selfTest();

  //infinite loop if self-test fails
  while(!success){}

  //initialize periodic timer
  timer.initialize();

  /* Turn on board LEDS for debugging purpose */
  GPIO_PinModeSet(gpioPortE,                /* GPIO port */
                  2,                        /* GPIO port number */
                  gpioModePushPull,         /* Pin mode is set to push pull */
                  0);                       /* High idle state */

}

void app_process_action(void)
{

  /**
   * Step 1: Acquire data from ADXL345
   */
  int16_t xAccel = accel.getXAcceleration();
  int16_t yAccel = accel.getYAcceleration();
  int16_t zAccel = accel.getZAcceleration();

  float mag = sqrt(xAccel * xAccel + yAccel * yAccel + zAccel * zAccel)/256;
  magnitude[counter % ARRAY_LENGTH] = mag;

  float d = magnitude[counter % ARRAY_LENGTH] - magnitude[(counter - 1 + ARRAY_LENGTH) % ARRAY_LENGTH];
  diffs[counter % ARRAY_LENGTH] = d;

  float square = diffs[counter % ARRAY_LENGTH] * diffs[counter % ARRAY_LENGTH];
  squares[counter % ARRAY_LENGTH] = square;

  float sum = 0;
  for (int i = 0; i < ARRAY_LENGTH; i++) {
      sum += squares[i];
  }
  averages[counter % ARRAY_LENGTH] = sum / ARRAY_LENGTH;
  switch (currentState) {
          case IDLE:
              if (averages[counter % ARRAY_LENGTH] > 0.02 && diffs[counter % ARRAY_LENGTH] > 0) {
                  nextState = DETECT;
              } else {
                  nextState = IDLE;
              }
              break;

          case DETECT:
              if (averages[counter % ARRAY_LENGTH] > 0.023 &&
                  averages[counter % ARRAY_LENGTH] > averages[(counter - 1 + ARRAY_LENGTH) % ARRAY_LENGTH] &&
                  averages[counter % ARRAY_LENGTH] > averages[(counter + 1) % ARRAY_LENGTH]) {
                  stepcounter++;
                  nextState = TIMEOUT;
                  timeoutCounter = 0;
              } else {
                  nextState = DETECT;
              }
              break;

          case TIMEOUT:
              timeoutCounter++;
              if (timeoutCounter > TIMEOUT_PERIOD) {
                  nextState = IDLE;
              } else {
                  nextState = TIMEOUT;
              }
              break;

          default:
              break;
      }

      // Update FSM state
      currentState = nextState;

      // Increment counter
      counter++;

      // Step 4: Sleep processor for sample rate and toggle LED
      timer.wait(50);
      GPIO_PinOutToggle(gpioPortE, 2);
  }
